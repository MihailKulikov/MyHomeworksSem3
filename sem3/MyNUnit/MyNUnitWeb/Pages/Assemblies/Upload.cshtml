@page
@using System.IO
@model MyNUnitWeb.Pages.Assemblies.LoadModel

@{
    ViewData["Title"] = "Upload";
}

<h1>Upload</h1>

<h4>Assembly</h4>
<hr />
@*<div class="row">
        <div class="col-md-4">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Assembly.Name" class="control-label"></label>
                    <input asp-for="Assembly.Name" class="form-control" />
                    <span asp-validation-for="Assembly.Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>*@

<form enctype="multipart/form-data" method="post">
    <dl>
        <dt>
            <label asp-for="FileUpload.FormFiles">Upload new assemblies:</label>
        </dt>
        <dd>
            <input asp-for="FileUpload.FormFiles" type="file" multiple accept=".dll">
            <span asp-validation-for="FileUpload.FormFiles"></span>
        </dd>
    </dl>
    <input asp-page-handler="Upload" type="submit" value="Upload" />
</form>

<p class="result">
    @Model.Result
</p>

<div>
    @foreach (var loadedFileName in Model.SavedFileNames)
    {
        <li>@loadedFileName</li>
    }
</div>

<form method="post">
    <button type="button" asp-page-handler="RunTest">Run tests</button>
</form>

<div>
    <a asp-page="Index">Back to List</a>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
